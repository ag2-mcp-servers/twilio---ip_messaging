# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T11:02:12+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity, HTTPBasic
from fastapi import Header, Path, Query
from pydantic import conint, constr
from starlette.requests import Request

from models import (
    BindingType,
    BindingType1,
    ChannelEnumWebhookEnabledType,
    Identity,
    IpMessagingV2Credential,
    IpMessagingV2Service,
    IpMessagingV2ServiceBinding,
    IpMessagingV2ServiceChannel,
    IpMessagingV2ServiceChannelChannelWebhook,
    IpMessagingV2ServiceChannelInvite,
    IpMessagingV2ServiceChannelMember,
    IpMessagingV2ServiceChannelMessage,
    IpMessagingV2ServiceRole,
    IpMessagingV2ServiceUser,
    IpMessagingV2ServiceUserUserBinding,
    IpMessagingV2ServiceUserUserChannel,
    MemberEnumWebhookEnabledType,
    MessageEnumOrderType,
    MessageEnumWebhookEnabledType,
    Type,
    UserEnumWebhookEnabledType,
    V2CredentialsGetResponse,
    V2ServicesGetResponse,
    V2ServicesServiceSidBindingsGetResponse,
    V2ServicesServiceSidChannelsChannelSidInvitesGetResponse,
    V2ServicesServiceSidChannelsChannelSidMembersGetResponse,
    V2ServicesServiceSidChannelsChannelSidMessagesGetResponse,
    V2ServicesServiceSidChannelsChannelSidWebhooksGetResponse,
    V2ServicesServiceSidChannelsGetResponse,
    V2ServicesServiceSidRolesGetResponse,
    V2ServicesServiceSidUsersGetResponse,
    V2ServicesServiceSidUsersUserSidBindingsGetResponse,
    V2ServicesServiceSidUsersUserSidChannelsGetResponse,
)

app = MCPProxy(
    contact={
        'email': 'support@twilio.com',
        'name': 'Twilio Support',
        'url': 'https://support.twilio.com',
    },
    description='This is the public Twilio REST API.',
    license={
        'name': 'Apache 2.0',
        'url': 'https://www.apache.org/licenses/LICENSE-2.0.html',
    },
    termsOfService='https://www.twilio.com/legal/tos',
    title='Twilio - Ip_messaging',
    version='1.42.0',
    servers=[{'url': 'https://ip-messaging.twilio.com'}],
)


@app.get(
    '/v2/Credentials',
    tags=['user_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def list_credential(
    page_size: Optional[conint(ge=1, le=1000)] = Query(None, alias='PageSize'),
    page: Optional[conint(ge=0)] = Query(None, alias='Page'),
    page_token: Optional[str] = Query(None, alias='PageToken'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/Credentials',
    tags=['credential_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create_credential(request: Request):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v2/Credentials/{Sid}',
    tags=['user_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_credential(
    sid: constr(pattern=r'^CR[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    )
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/Credentials/{Sid}',
    tags=['credential_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_credential(
    sid: constr(pattern=r'^CR[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    )
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/Credentials/{Sid}',
    tags=['credential_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def update_credential(
    sid: constr(pattern=r'^CR[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    ),
    request: Request = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/Services',
    tags=['user_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def list_service(
    page_size: Optional[conint(ge=1, le=1000)] = Query(None, alias='PageSize'),
    page: Optional[conint(ge=0)] = Query(None, alias='Page'),
    page_token: Optional[str] = Query(None, alias='PageToken'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/Services',
    tags=['user_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create_service(request: Request):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/Services/{ServiceSid}/Bindings',
    tags=['binding_management', 'service_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def list_binding(
    service_sid: constr(
        pattern=r'^IS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    binding_type: Optional[BindingType] = Query(None, alias='BindingType'),
    identity: Optional[Identity] = Query(None, alias='Identity'),
    page_size: Optional[conint(ge=1, le=1000)] = Query(None, alias='PageSize'),
    page: Optional[conint(ge=0)] = Query(None, alias='Page'),
    page_token: Optional[str] = Query(None, alias='PageToken'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v2/Services/{ServiceSid}/Bindings/{Sid}',
    tags=['service_management', 'binding_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_binding(
    service_sid: constr(
        pattern=r'^IS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    sid: constr(pattern=r'^BS[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    ),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/Services/{ServiceSid}/Bindings/{Sid}',
    tags=['service_management', 'binding_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_binding(
    service_sid: constr(
        pattern=r'^IS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    sid: constr(pattern=r'^BS[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    ),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/Services/{ServiceSid}/Channels',
    tags=['service_management', 'binding_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def list_channel(
    service_sid: constr(
        pattern=r'^IS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    type: Optional[Type] = Query(None, alias='Type'),
    page_size: Optional[conint(ge=1, le=1000)] = Query(None, alias='PageSize'),
    page: Optional[conint(ge=0)] = Query(None, alias='Page'),
    page_token: Optional[str] = Query(None, alias='PageToken'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/Services/{ServiceSid}/Channels',
    tags=['service_management', 'channel_webhook_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create_channel(
    service_sid: constr(
        pattern=r'^IS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    x__twilio__webhook__enabled: Optional[ChannelEnumWebhookEnabledType] = Header(
        None, alias='X-Twilio-Webhook-Enabled'
    ),
    request: Request = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Invites',
    tags=['binding_management', 'channel_management', 'member_administration'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def list_invite(
    service_sid: constr(
        pattern=r'^IS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    channel_sid: str = Path(..., alias='ChannelSid'),
    identity: Optional[Identity] = Query(None, alias='Identity'),
    page_size: Optional[conint(ge=1, le=1000)] = Query(None, alias='PageSize'),
    page: Optional[conint(ge=0)] = Query(None, alias='Page'),
    page_token: Optional[str] = Query(None, alias='PageToken'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Invites',
    tags=['service_management', 'channel_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create_invite(
    service_sid: constr(
        pattern=r'^IS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    channel_sid: str = Path(..., alias='ChannelSid'),
    request: Request = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Invites/{Sid}',
    tags=['service_management', 'channel_management', 'binding_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_invite(
    service_sid: constr(
        pattern=r'^IS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    channel_sid: str = Path(..., alias='ChannelSid'),
    sid: constr(pattern=r'^IN[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    ),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Invites/{Sid}',
    tags=['service_management', 'channel_management', 'binding_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_invite(
    service_sid: constr(
        pattern=r'^IS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    channel_sid: str = Path(..., alias='ChannelSid'),
    sid: constr(pattern=r'^IN[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    ),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Members',
    tags=['binding_management', 'channel_management', 'invite_handling'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def list_member(
    service_sid: constr(
        pattern=r'^IS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    channel_sid: str = Path(..., alias='ChannelSid'),
    identity: Optional[Identity] = Query(None, alias='Identity'),
    page_size: Optional[conint(ge=1, le=1000)] = Query(None, alias='PageSize'),
    page: Optional[conint(ge=0)] = Query(None, alias='Page'),
    page_token: Optional[str] = Query(None, alias='PageToken'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Members',
    tags=['channel_webhook_management', 'channel_management', 'member_administration'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create_member(
    service_sid: constr(
        pattern=r'^IS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    channel_sid: str = Path(..., alias='ChannelSid'),
    x__twilio__webhook__enabled: Optional[MemberEnumWebhookEnabledType] = Header(
        None, alias='X-Twilio-Webhook-Enabled'
    ),
    request: Request = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Members/{Sid}',
    tags=['channel_webhook_management', 'channel_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_member(
    service_sid: constr(
        pattern=r'^IS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    channel_sid: str = Path(..., alias='ChannelSid'),
    sid: str = Path(..., alias='Sid'),
    x__twilio__webhook__enabled: Optional[MemberEnumWebhookEnabledType] = Header(
        None, alias='X-Twilio-Webhook-Enabled'
    ),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Members/{Sid}',
    tags=['service_management', 'channel_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_member(
    service_sid: constr(
        pattern=r'^IS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    channel_sid: str = Path(..., alias='ChannelSid'),
    sid: str = Path(..., alias='Sid'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Members/{Sid}',
    tags=['channel_webhook_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def update_member(
    service_sid: constr(
        pattern=r'^IS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    channel_sid: str = Path(..., alias='ChannelSid'),
    sid: str = Path(..., alias='Sid'),
    x__twilio__webhook__enabled: Optional[MemberEnumWebhookEnabledType] = Header(
        None, alias='X-Twilio-Webhook-Enabled'
    ),
    request: Request = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Messages',
    tags=['channel_management', 'message_handling'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def list_message(
    service_sid: constr(
        pattern=r'^IS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    channel_sid: str = Path(..., alias='ChannelSid'),
    order: Optional[MessageEnumOrderType] = Query(None, alias='Order'),
    page_size: Optional[conint(ge=1, le=1000)] = Query(None, alias='PageSize'),
    page: Optional[conint(ge=0)] = Query(None, alias='Page'),
    page_token: Optional[str] = Query(None, alias='PageToken'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Messages',
    tags=['channel_webhook_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create_message(
    service_sid: constr(
        pattern=r'^IS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    channel_sid: str = Path(..., alias='ChannelSid'),
    x__twilio__webhook__enabled: Optional[MessageEnumWebhookEnabledType] = Header(
        None, alias='X-Twilio-Webhook-Enabled'
    ),
    request: Request = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Messages/{Sid}',
    tags=['service_management', 'channel_management', 'channel_webhook_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_message(
    service_sid: constr(
        pattern=r'^IS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    channel_sid: str = Path(..., alias='ChannelSid'),
    sid: constr(pattern=r'^IM[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    ),
    x__twilio__webhook__enabled: Optional[MessageEnumWebhookEnabledType] = Header(
        None, alias='X-Twilio-Webhook-Enabled'
    ),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Messages/{Sid}',
    tags=['binding_management', 'channel_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_message(
    service_sid: constr(
        pattern=r'^IS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    channel_sid: str = Path(..., alias='ChannelSid'),
    sid: constr(pattern=r'^IM[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    ),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Messages/{Sid}',
    tags=['channel_management', 'channel_webhook_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def update_message(
    service_sid: constr(
        pattern=r'^IS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    channel_sid: str = Path(..., alias='ChannelSid'),
    sid: constr(pattern=r'^IM[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    ),
    x__twilio__webhook__enabled: Optional[MessageEnumWebhookEnabledType] = Header(
        None, alias='X-Twilio-Webhook-Enabled'
    ),
    request: Request = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Webhooks',
    tags=['service_management', 'channel_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def list_channel_webhook(
    service_sid: constr(
        pattern=r'^IS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    channel_sid: str = Path(..., alias='ChannelSid'),
    page_size: Optional[conint(ge=1, le=1000)] = Query(None, alias='PageSize'),
    page: Optional[conint(ge=0)] = Query(None, alias='Page'),
    page_token: Optional[str] = Query(None, alias='PageToken'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Webhooks',
    tags=['service_management', 'channel_management', 'binding_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create_channel_webhook(
    service_sid: constr(
        pattern=r'^IS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    channel_sid: str = Path(..., alias='ChannelSid'),
    request: Request = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Webhooks/{Sid}',
    tags=['binding_management', 'channel_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_channel_webhook(
    service_sid: constr(
        pattern=r'^IS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    channel_sid: str = Path(..., alias='ChannelSid'),
    sid: constr(pattern=r'^WH[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    ),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Webhooks/{Sid}',
    tags=['service_management', 'channel_management', 'binding_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_channel_webhook(
    service_sid: constr(
        pattern=r'^IS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    channel_sid: str = Path(..., alias='ChannelSid'),
    sid: constr(pattern=r'^WH[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    ),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Webhooks/{Sid}',
    tags=['channel_management', 'binding_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def update_channel_webhook(
    service_sid: constr(
        pattern=r'^IS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    channel_sid: str = Path(..., alias='ChannelSid'),
    sid: constr(pattern=r'^WH[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    ),
    request: Request = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v2/Services/{ServiceSid}/Channels/{Sid}',
    tags=['service_management', 'channel_webhook_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_channel(
    service_sid: constr(
        pattern=r'^IS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    sid: str = Path(..., alias='Sid'),
    x__twilio__webhook__enabled: Optional[ChannelEnumWebhookEnabledType] = Header(
        None, alias='X-Twilio-Webhook-Enabled'
    ),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/Services/{ServiceSid}/Channels/{Sid}',
    tags=['service_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_channel(
    service_sid: constr(
        pattern=r'^IS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    sid: str = Path(..., alias='Sid'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/Services/{ServiceSid}/Channels/{Sid}',
    tags=['channel_webhook_management', 'service_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def update_channel(
    service_sid: constr(
        pattern=r'^IS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    sid: str = Path(..., alias='Sid'),
    x__twilio__webhook__enabled: Optional[ChannelEnumWebhookEnabledType] = Header(
        None, alias='X-Twilio-Webhook-Enabled'
    ),
    request: Request = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/Services/{ServiceSid}/Roles',
    tags=['service_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def list_role(
    service_sid: constr(
        pattern=r'^IS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    page_size: Optional[conint(ge=1, le=1000)] = Query(None, alias='PageSize'),
    page: Optional[conint(ge=0)] = Query(None, alias='Page'),
    page_token: Optional[str] = Query(None, alias='PageToken'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/Services/{ServiceSid}/Roles',
    tags=['service_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create_role(
    service_sid: constr(
        pattern=r'^IS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    request: Request = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v2/Services/{ServiceSid}/Roles/{Sid}',
    tags=['service_management', 'binding_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_role(
    service_sid: constr(
        pattern=r'^IS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    sid: constr(pattern=r'^RL[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    ),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/Services/{ServiceSid}/Roles/{Sid}',
    tags=['service_management', 'binding_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_role(
    service_sid: constr(
        pattern=r'^IS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    sid: constr(pattern=r'^RL[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    ),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/Services/{ServiceSid}/Roles/{Sid}',
    tags=['service_management', 'binding_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def update_role(
    service_sid: constr(
        pattern=r'^IS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    sid: constr(pattern=r'^RL[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    ),
    request: Request = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/Services/{ServiceSid}/Users',
    tags=['service_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def list_user(
    service_sid: constr(
        pattern=r'^IS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    page_size: Optional[conint(ge=1, le=1000)] = Query(None, alias='PageSize'),
    page: Optional[conint(ge=0)] = Query(None, alias='Page'),
    page_token: Optional[str] = Query(None, alias='PageToken'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/Services/{ServiceSid}/Users',
    tags=['service_management', 'channel_webhook_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create_user(
    service_sid: constr(
        pattern=r'^IS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    x__twilio__webhook__enabled: Optional[UserEnumWebhookEnabledType] = Header(
        None, alias='X-Twilio-Webhook-Enabled'
    ),
    request: Request = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v2/Services/{ServiceSid}/Users/{Sid}',
    tags=['service_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_user(
    service_sid: constr(
        pattern=r'^IS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    sid: str = Path(..., alias='Sid'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/Services/{ServiceSid}/Users/{Sid}',
    tags=['service_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_user(
    service_sid: constr(
        pattern=r'^IS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    sid: str = Path(..., alias='Sid'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/Services/{ServiceSid}/Users/{Sid}',
    tags=['service_management', 'user_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def update_user(
    service_sid: constr(
        pattern=r'^IS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    sid: str = Path(..., alias='Sid'),
    x__twilio__webhook__enabled: Optional[UserEnumWebhookEnabledType] = Header(
        None, alias='X-Twilio-Webhook-Enabled'
    ),
    request: Request = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/Services/{ServiceSid}/Users/{UserSid}/Bindings',
    tags=['binding_management', 'user_binding_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def list_user_binding(
    service_sid: constr(
        pattern=r'^IS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    user_sid: str = Path(..., alias='UserSid'),
    binding_type: Optional[BindingType1] = Query(None, alias='BindingType'),
    page_size: Optional[conint(ge=1, le=1000)] = Query(None, alias='PageSize'),
    page: Optional[conint(ge=0)] = Query(None, alias='Page'),
    page_token: Optional[str] = Query(None, alias='PageToken'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v2/Services/{ServiceSid}/Users/{UserSid}/Bindings/{Sid}',
    tags=['binding_management', 'user_binding_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_user_binding(
    service_sid: constr(
        pattern=r'^IS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    user_sid: str = Path(..., alias='UserSid'),
    sid: constr(pattern=r'^BS[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    ),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/Services/{ServiceSid}/Users/{UserSid}/Bindings/{Sid}',
    tags=['binding_management', 'service_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_user_binding(
    service_sid: constr(
        pattern=r'^IS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    user_sid: str = Path(..., alias='UserSid'),
    sid: constr(pattern=r'^BS[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    ),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/Services/{ServiceSid}/Users/{UserSid}/Channels',
    tags=['service_management', 'user_management', 'binding_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def list_user_channel(
    service_sid: constr(
        pattern=r'^IS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    user_sid: str = Path(..., alias='UserSid'),
    page_size: Optional[conint(ge=1, le=1000)] = Query(None, alias='PageSize'),
    page: Optional[conint(ge=0)] = Query(None, alias='Page'),
    page_token: Optional[str] = Query(None, alias='PageToken'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v2/Services/{ServiceSid}/Users/{UserSid}/Channels/{ChannelSid}',
    tags=['binding_management', 'user_channel_association'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_user_channel(
    service_sid: constr(
        pattern=r'^IS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    user_sid: str = Path(..., alias='UserSid'),
    channel_sid: str = Path(..., alias='ChannelSid'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/Services/{ServiceSid}/Users/{UserSid}/Channels/{ChannelSid}',
    tags=['user_channel_association', 'binding_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_user_channel(
    service_sid: constr(
        pattern=r'^IS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    user_sid: str = Path(..., alias='UserSid'),
    channel_sid: str = Path(..., alias='ChannelSid'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/Services/{ServiceSid}/Users/{UserSid}/Channels/{ChannelSid}',
    tags=['user_channel_association'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def update_user_channel(
    service_sid: constr(
        pattern=r'^IS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    user_sid: str = Path(..., alias='UserSid'),
    channel_sid: str = Path(..., alias='ChannelSid'),
    request: Request = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v2/Services/{Sid}',
    tags=['credential_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_service(
    sid: constr(pattern=r'^IS[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    )
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/Services/{Sid}',
    tags=['credential_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_service(
    sid: constr(pattern=r'^IS[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    )
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/Services/{Sid}',
    tags=['service_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def update_service(
    sid: constr(pattern=r'^IS[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    ),
    request: Request = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
